// Copyright 2025 The fawa Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: fawa/canva/v1/canva.proto

package canvav1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/fawa-io/fawa/gen/fawa/canva/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// CanvaServiceName is the fully-qualified name of the CanvaService service.
	CanvaServiceName = "proto.fawa.canva.v1.CanvaService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// CanvaServiceCollaborateProcedure is the fully-qualified name of the CanvaService's Collaborate
	// RPC.
	CanvaServiceCollaborateProcedure = "/proto.fawa.canva.v1.CanvaService/Collaborate"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	canvaServiceServiceDescriptor           = v1.File_fawa_canva_v1_canva_proto.Services().ByName("CanvaService")
	canvaServiceCollaborateMethodDescriptor = canvaServiceServiceDescriptor.Methods().ByName("Collaborate")
)

// CanvaServiceClient is a client for the proto.fawa.canva.v1.CanvaService service.
type CanvaServiceClient interface {
	Collaborate(context.Context) *connect.BidiStreamForClient[v1.ClientDrawRequest, v1.ClientDrawResponse]
}

// NewCanvaServiceClient constructs a client for the proto.fawa.canva.v1.CanvaService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewCanvaServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) CanvaServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &canvaServiceClient{
		collaborate: connect.NewClient[v1.ClientDrawRequest, v1.ClientDrawResponse](
			httpClient,
			baseURL+CanvaServiceCollaborateProcedure,
			connect.WithSchema(canvaServiceCollaborateMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// canvaServiceClient implements CanvaServiceClient.
type canvaServiceClient struct {
	collaborate *connect.Client[v1.ClientDrawRequest, v1.ClientDrawResponse]
}

// Collaborate calls proto.fawa.canva.v1.CanvaService.Collaborate.
func (c *canvaServiceClient) Collaborate(ctx context.Context) *connect.BidiStreamForClient[v1.ClientDrawRequest, v1.ClientDrawResponse] {
	return c.collaborate.CallBidiStream(ctx)
}

// CanvaServiceHandler is an implementation of the proto.fawa.canva.v1.CanvaService service.
type CanvaServiceHandler interface {
	Collaborate(context.Context, *connect.BidiStream[v1.ClientDrawRequest, v1.ClientDrawResponse]) error
}

// NewCanvaServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewCanvaServiceHandler(svc CanvaServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	canvaServiceCollaborateHandler := connect.NewBidiStreamHandler(
		CanvaServiceCollaborateProcedure,
		svc.Collaborate,
		connect.WithSchema(canvaServiceCollaborateMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.fawa.canva.v1.CanvaService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case CanvaServiceCollaborateProcedure:
			canvaServiceCollaborateHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedCanvaServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedCanvaServiceHandler struct{}

func (UnimplementedCanvaServiceHandler) Collaborate(context.Context, *connect.BidiStream[v1.ClientDrawRequest, v1.ClientDrawResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("proto.fawa.canva.v1.CanvaService.Collaborate is not implemented"))
}
