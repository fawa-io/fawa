// Copyright 2025 The fawa Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/fawa/greet/v1/hello.proto

package greetv1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/fawa-io/fawa/gen/proto/fawa/greet/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GreetServiceName is the fully-qualified name of the GreetService service.
	GreetServiceName = "proto.fawa.greet.v1.GreetService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GreetServiceSayHelloProcedure is the fully-qualified name of the GreetService's SayHello RPC.
	GreetServiceSayHelloProcedure = "/proto.fawa.greet.v1.GreetService/SayHello"
	// GreetServiceGreetStreamProcedure is the fully-qualified name of the GreetService's GreetStream
	// RPC.
	GreetServiceGreetStreamProcedure = "/proto.fawa.greet.v1.GreetService/GreetStream"
	// GreetServiceGreetClientStreamProcedure is the fully-qualified name of the GreetService's
	// GreetClientStream RPC.
	GreetServiceGreetClientStreamProcedure = "/proto.fawa.greet.v1.GreetService/GreetClientStream"
	// GreetServiceGreetBidiStreamProcedure is the fully-qualified name of the GreetService's
	// GreetBidiStream RPC.
	GreetServiceGreetBidiStreamProcedure = "/proto.fawa.greet.v1.GreetService/GreetBidiStream"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	greetServiceServiceDescriptor                 = v1.File_proto_fawa_greet_v1_hello_proto.Services().ByName("GreetService")
	greetServiceSayHelloMethodDescriptor          = greetServiceServiceDescriptor.Methods().ByName("SayHello")
	greetServiceGreetStreamMethodDescriptor       = greetServiceServiceDescriptor.Methods().ByName("GreetStream")
	greetServiceGreetClientStreamMethodDescriptor = greetServiceServiceDescriptor.Methods().ByName("GreetClientStream")
	greetServiceGreetBidiStreamMethodDescriptor   = greetServiceServiceDescriptor.Methods().ByName("GreetBidiStream")
)

// GreetServiceClient is a client for the proto.fawa.greet.v1.GreetService service.
type GreetServiceClient interface {
	// SayHello is a unary RPC.
	SayHello(context.Context, *connect.Request[v1.SayHelloRequest]) (*connect.Response[v1.SayHelloResponse], error)
	// GreetStream is a server-streaming RPC.
	GreetStream(context.Context, *connect.Request[v1.GreetStreamRequest]) (*connect.ServerStreamForClient[v1.GreetStreamResponse], error)
	// GreetClientStream is a client-streaming RPC.
	GreetClientStream(context.Context) *connect.ClientStreamForClient[v1.GreetClientStreamRequest, v1.GreetClientStreamResponse]
	// GreetBidiStream is a bidirectional-streaming RPC.
	GreetBidiStream(context.Context) *connect.BidiStreamForClient[v1.GreetBidiStreamRequest, v1.GreetBidiStreamResponse]
}

// NewGreetServiceClient constructs a client for the proto.fawa.greet.v1.GreetService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGreetServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GreetServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &greetServiceClient{
		sayHello: connect.NewClient[v1.SayHelloRequest, v1.SayHelloResponse](
			httpClient,
			baseURL+GreetServiceSayHelloProcedure,
			connect.WithSchema(greetServiceSayHelloMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		greetStream: connect.NewClient[v1.GreetStreamRequest, v1.GreetStreamResponse](
			httpClient,
			baseURL+GreetServiceGreetStreamProcedure,
			connect.WithSchema(greetServiceGreetStreamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		greetClientStream: connect.NewClient[v1.GreetClientStreamRequest, v1.GreetClientStreamResponse](
			httpClient,
			baseURL+GreetServiceGreetClientStreamProcedure,
			connect.WithSchema(greetServiceGreetClientStreamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		greetBidiStream: connect.NewClient[v1.GreetBidiStreamRequest, v1.GreetBidiStreamResponse](
			httpClient,
			baseURL+GreetServiceGreetBidiStreamProcedure,
			connect.WithSchema(greetServiceGreetBidiStreamMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// greetServiceClient implements GreetServiceClient.
type greetServiceClient struct {
	sayHello          *connect.Client[v1.SayHelloRequest, v1.SayHelloResponse]
	greetStream       *connect.Client[v1.GreetStreamRequest, v1.GreetStreamResponse]
	greetClientStream *connect.Client[v1.GreetClientStreamRequest, v1.GreetClientStreamResponse]
	greetBidiStream   *connect.Client[v1.GreetBidiStreamRequest, v1.GreetBidiStreamResponse]
}

// SayHello calls proto.fawa.greet.v1.GreetService.SayHello.
func (c *greetServiceClient) SayHello(ctx context.Context, req *connect.Request[v1.SayHelloRequest]) (*connect.Response[v1.SayHelloResponse], error) {
	return c.sayHello.CallUnary(ctx, req)
}

// GreetStream calls proto.fawa.greet.v1.GreetService.GreetStream.
func (c *greetServiceClient) GreetStream(ctx context.Context, req *connect.Request[v1.GreetStreamRequest]) (*connect.ServerStreamForClient[v1.GreetStreamResponse], error) {
	return c.greetStream.CallServerStream(ctx, req)
}

// GreetClientStream calls proto.fawa.greet.v1.GreetService.GreetClientStream.
func (c *greetServiceClient) GreetClientStream(ctx context.Context) *connect.ClientStreamForClient[v1.GreetClientStreamRequest, v1.GreetClientStreamResponse] {
	return c.greetClientStream.CallClientStream(ctx)
}

// GreetBidiStream calls proto.fawa.greet.v1.GreetService.GreetBidiStream.
func (c *greetServiceClient) GreetBidiStream(ctx context.Context) *connect.BidiStreamForClient[v1.GreetBidiStreamRequest, v1.GreetBidiStreamResponse] {
	return c.greetBidiStream.CallBidiStream(ctx)
}

// GreetServiceHandler is an implementation of the proto.fawa.greet.v1.GreetService service.
type GreetServiceHandler interface {
	// SayHello is a unary RPC.
	SayHello(context.Context, *connect.Request[v1.SayHelloRequest]) (*connect.Response[v1.SayHelloResponse], error)
	// GreetStream is a server-streaming RPC.
	GreetStream(context.Context, *connect.Request[v1.GreetStreamRequest], *connect.ServerStream[v1.GreetStreamResponse]) error
	// GreetClientStream is a client-streaming RPC.
	GreetClientStream(context.Context, *connect.ClientStream[v1.GreetClientStreamRequest]) (*connect.Response[v1.GreetClientStreamResponse], error)
	// GreetBidiStream is a bidirectional-streaming RPC.
	GreetBidiStream(context.Context, *connect.BidiStream[v1.GreetBidiStreamRequest, v1.GreetBidiStreamResponse]) error
}

// NewGreetServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGreetServiceHandler(svc GreetServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	greetServiceSayHelloHandler := connect.NewUnaryHandler(
		GreetServiceSayHelloProcedure,
		svc.SayHello,
		connect.WithSchema(greetServiceSayHelloMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	greetServiceGreetStreamHandler := connect.NewServerStreamHandler(
		GreetServiceGreetStreamProcedure,
		svc.GreetStream,
		connect.WithSchema(greetServiceGreetStreamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	greetServiceGreetClientStreamHandler := connect.NewClientStreamHandler(
		GreetServiceGreetClientStreamProcedure,
		svc.GreetClientStream,
		connect.WithSchema(greetServiceGreetClientStreamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	greetServiceGreetBidiStreamHandler := connect.NewBidiStreamHandler(
		GreetServiceGreetBidiStreamProcedure,
		svc.GreetBidiStream,
		connect.WithSchema(greetServiceGreetBidiStreamMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.fawa.greet.v1.GreetService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GreetServiceSayHelloProcedure:
			greetServiceSayHelloHandler.ServeHTTP(w, r)
		case GreetServiceGreetStreamProcedure:
			greetServiceGreetStreamHandler.ServeHTTP(w, r)
		case GreetServiceGreetClientStreamProcedure:
			greetServiceGreetClientStreamHandler.ServeHTTP(w, r)
		case GreetServiceGreetBidiStreamProcedure:
			greetServiceGreetBidiStreamHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGreetServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGreetServiceHandler struct{}

func (UnimplementedGreetServiceHandler) SayHello(context.Context, *connect.Request[v1.SayHelloRequest]) (*connect.Response[v1.SayHelloResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.fawa.greet.v1.GreetService.SayHello is not implemented"))
}

func (UnimplementedGreetServiceHandler) GreetStream(context.Context, *connect.Request[v1.GreetStreamRequest], *connect.ServerStream[v1.GreetStreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("proto.fawa.greet.v1.GreetService.GreetStream is not implemented"))
}

func (UnimplementedGreetServiceHandler) GreetClientStream(context.Context, *connect.ClientStream[v1.GreetClientStreamRequest]) (*connect.Response[v1.GreetClientStreamResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.fawa.greet.v1.GreetService.GreetClientStream is not implemented"))
}

func (UnimplementedGreetServiceHandler) GreetBidiStream(context.Context, *connect.BidiStream[v1.GreetBidiStreamRequest, v1.GreetBidiStreamResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("proto.fawa.greet.v1.GreetService.GreetBidiStream is not implemented"))
}
