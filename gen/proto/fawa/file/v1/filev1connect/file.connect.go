// Copyright 2025 The fawa Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/fawa/file/v1/file.proto

package filev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/fawa-io/fawa/gen/proto/fawa/file/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FileServiceName is the fully-qualified name of the FileService service.
	FileServiceName = "proto.fawa.file.v1.FileService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// FileServiceSendFileProcedure is the fully-qualified name of the FileService's SendFile RPC.
	FileServiceSendFileProcedure = "/proto.fawa.file.v1.FileService/SendFile"
	// FileServiceReceiveFileProcedure is the fully-qualified name of the FileService's ReceiveFile RPC.
	FileServiceReceiveFileProcedure = "/proto.fawa.file.v1.FileService/ReceiveFile"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	fileServiceServiceDescriptor           = v1.File_proto_fawa_file_v1_file_proto.Services().ByName("FileService")
	fileServiceSendFileMethodDescriptor    = fileServiceServiceDescriptor.Methods().ByName("SendFile")
	fileServiceReceiveFileMethodDescriptor = fileServiceServiceDescriptor.Methods().ByName("ReceiveFile")
)

// FileServiceClient is a client for the proto.fawa.file.v1.FileService service.
type FileServiceClient interface {
	SendFile(context.Context) *connect.ClientStreamForClient[v1.SendFileRequest, v1.SendFileResponse]
	ReceiveFile(context.Context, *connect.Request[v1.ReceiveFileRequest]) (*connect.ServerStreamForClient[v1.ReceiveFileResponse], error)
}

// NewFileServiceClient constructs a client for the proto.fawa.file.v1.FileService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFileServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FileServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &fileServiceClient{
		sendFile: connect.NewClient[v1.SendFileRequest, v1.SendFileResponse](
			httpClient,
			baseURL+FileServiceSendFileProcedure,
			connect.WithSchema(fileServiceSendFileMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		receiveFile: connect.NewClient[v1.ReceiveFileRequest, v1.ReceiveFileResponse](
			httpClient,
			baseURL+FileServiceReceiveFileProcedure,
			connect.WithSchema(fileServiceReceiveFileMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// fileServiceClient implements FileServiceClient.
type fileServiceClient struct {
	sendFile    *connect.Client[v1.SendFileRequest, v1.SendFileResponse]
	receiveFile *connect.Client[v1.ReceiveFileRequest, v1.ReceiveFileResponse]
}

// SendFile calls proto.fawa.file.v1.FileService.SendFile.
func (c *fileServiceClient) SendFile(ctx context.Context) *connect.ClientStreamForClient[v1.SendFileRequest, v1.SendFileResponse] {
	return c.sendFile.CallClientStream(ctx)
}

// ReceiveFile calls proto.fawa.file.v1.FileService.ReceiveFile.
func (c *fileServiceClient) ReceiveFile(ctx context.Context, req *connect.Request[v1.ReceiveFileRequest]) (*connect.ServerStreamForClient[v1.ReceiveFileResponse], error) {
	return c.receiveFile.CallServerStream(ctx, req)
}

// FileServiceHandler is an implementation of the proto.fawa.file.v1.FileService service.
type FileServiceHandler interface {
	SendFile(context.Context, *connect.ClientStream[v1.SendFileRequest]) (*connect.Response[v1.SendFileResponse], error)
	ReceiveFile(context.Context, *connect.Request[v1.ReceiveFileRequest], *connect.ServerStream[v1.ReceiveFileResponse]) error
}

// NewFileServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFileServiceHandler(svc FileServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	fileServiceSendFileHandler := connect.NewClientStreamHandler(
		FileServiceSendFileProcedure,
		svc.SendFile,
		connect.WithSchema(fileServiceSendFileMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	fileServiceReceiveFileHandler := connect.NewServerStreamHandler(
		FileServiceReceiveFileProcedure,
		svc.ReceiveFile,
		connect.WithSchema(fileServiceReceiveFileMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/proto.fawa.file.v1.FileService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case FileServiceSendFileProcedure:
			fileServiceSendFileHandler.ServeHTTP(w, r)
		case FileServiceReceiveFileProcedure:
			fileServiceReceiveFileHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFileServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFileServiceHandler struct{}

func (UnimplementedFileServiceHandler) SendFile(context.Context, *connect.ClientStream[v1.SendFileRequest]) (*connect.Response[v1.SendFileResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("proto.fawa.file.v1.FileService.SendFile is not implemented"))
}

func (UnimplementedFileServiceHandler) ReceiveFile(context.Context, *connect.Request[v1.ReceiveFileRequest], *connect.ServerStream[v1.ReceiveFileResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("proto.fawa.file.v1.FileService.ReceiveFile is not implemented"))
}
